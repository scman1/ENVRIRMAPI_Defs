swagger: '2.0'
info:
  description: >-
    Sample ENVRI RM PID Manager Descriptintion in Swaggwe. This sample describes
    the documentantation of a generic PID Managere Service which collaborates
    with a PID Registry service (e.g. DOI, ePIC, or  ORCID registries). The
    endpoints exposed in this example are the ones used to the connect the
    internal RI components which will request identifiers.
  version: 0.0.1
  title: ENVRI RM PID Manager
  termsOfService: 'http://envri.eu/documentation/services/'
  contact:
    email: envriplus-wp5@helsinki.fi
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: pid_manager.envri
basePath: /v2
tags:
  - name: pid
    description: >-
      Manage persitent identifier (PID), including registration with an external
      PID registry service.
    externalDocs:
      description: Find out more
      url: 'http://www.envri.eu/rm'
  - name: citation
    description: Retrive data set citation information in different formats
    externalDocs:
      description: >-
        Find out more about Identification and Citation Services supported by
        the ENVRI RM
      url: 'http://www.envri.eu/rm'
schemes:
  - http
paths:
  /pid:
    post:
      tags:
        - pid
      summary: Get a new PID for a Data Object
      description: >-
        Get a new PID for a Data Object, the PID manager deals with the miniting
        and assigning of PIDs to Data
      operationId: addpid
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: >-
            PID metadata with a reference to the data object that needs to be
            identified
          required: true
          schema:
            $ref: '#/definitions/pid'
      responses:
        '405':
          description: Invalid metadata
      security:
        - pidcatalogue_auth:
            - 'write:pids'
            - 'read:pids'
    put:
      tags:
        - pid
      summary: Update an existing PID
      description: >-
        Update PID metadata for a Data Object, the PID manager deals with the
        miniting and assigning of PIDs to Data
      operationId: updatePID
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: >-
            PID metadata, including reference to the data object, that needs to
            be updated
          required: true
          schema:
            $ref: '#/definitions/pid'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: PID not found
        '405':
          description: Validation exception
      security:
        - pidcatalogue_auth:
            - 'write:pids'
            - 'read:pids'
  /pid/findByStatus:
    get:
      tags:
        - pid
      summary: Finds PIDs by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPIDsByStatus
      produces:
        - application/xml
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - registered_not_public
              - registered
              - assigned_not_public
              - assigned
              - deleted
              - deleted_not_public
              - updated
              - updated_not_public
            default: registered_not_public
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/pid'
        '400':
          description: Invalid status value
      security:
        - pidcatalogue_auth:
            - 'write:pids'
            - 'read:pids'
  /pid/findByTags:
    get:
      tags:
        - pid
      summary: Finds PIDs by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use        
        tag1, tag2, tag3 for testing.
      operationId: findPIDsByTags
      produces:
        - application/xml
        - application/json
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/pid'
        '400':
          description: Invalid tag value
      security:
        - pidcatalogue_auth:
            - 'write:pids'
            - 'read:pids'
      deprecated: true
  '/pid/{pidId}':
    get:
      tags:
        - pid
      summary: Find PID by ID
      description: Returns a single PID metadata for building landing page
      operationId: getPIDById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: pidId
          in: path
          description: ID of PID to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/pid'
        '400':
          description: Invalid ID supplied
        '404':
          description: PID not found
      security:
        - api_key: []
    post:
      tags:
        - pid
      summary: Updates a PID in the catalogue with form data
      description: ''
      operationId: updatePIDWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: pidId
          in: path
          description: ID of PID that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the PID
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the PID
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
      security:
        - pidcatalogue_auth:
            - 'write:pids'
            - 'read:pids'
    delete:
      tags:
        - pid
      summary: Deletes a PID
      description: ''
      operationId: deletePID
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: pidId
          in: path
          description: PID id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: PID not found
      security:
        - pidcatalogue_auth:
            - 'write:pids'
            - 'read:pids'
  '/pid/{pidId}/uploadImage':
    post:
      tags:
        - pid
      summary: uploads an image
      description: ''
      operationId: uploadFile
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: pidId
          in: path
          description: ID of PID to update
          required: true
          type: integer
          format: int64
        - name: additionalMetadata
          in: formData
          description: Additional data to pass to server
          required: false
          type: string
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
        - pidcatalogue_auth:
            - 'write:pids'
            - 'read:pids'
  /catalogue/inventory:
    get:
      tags:
        - catalogue
      summary: Returns PID lists by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
        - api_key: []
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
securityDefinitions:
  pidcatalogue_auth:
    type: oauth2
    authorizationUrl: 'http://pid_manager.envri/oauth/dialog'
    flow: implicit
    scopes:
      'write:pids': modify PIDs in your account
      'read:pids': read your PIDs
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  pid:
    type: object
    required:
      - name
      - dataUrls
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
        example: Argo float data and metadata from Global Data Assembly Centre
      dataUrls:
        type: array
        xml:
          name: dataUrl
          wrapped: true
        items:
          type: string
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: PID status in the system
        enum:
          - registered_not_public
          - registered
          - assigned_not_public
          - assigned
          - deleted
          - deleted_not_public
          - updated
          - updated_not_public
      prefix:
        type: string
        example: 10.17882
      suffix:
        type: string
        example: 42182
    xml:
      name: pid
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about PID Manager Services
  url: 'https://wiki.envri.eu/display/EC/Data+Identification'
